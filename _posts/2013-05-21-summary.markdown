---
layout: post
title: 彩票订单详情改造项目总结
---

## 项目介绍：

项目的时间计划：

- 前端开发时间： 1月8日

- demo完成时间： 1月24日

- 前后端开发联调时间： 2月29日

- 测试： 3月18日（日常）~4月3日（预发），预计上线时间是3月中旬

- 上线： 4月10日（发布） 


详情页面涉及部分：

- 数字彩详情

- 竞彩（篮球、足球）详情

- 老足彩详情

- 足球单场详情

- 定制跟单子列表

- 追号子列表

- 赠送子列表


## 详情页面改版的目标：

1、提供用户体验

 - 结构清晰，数据信息可读、易懂

 - 视觉效果更具冲击力

 - 提供sns分享，加强用户参与感

2、代码层次结构清晰

3、扩展性、复用性、维护性提高


## 新详情页面结构

后端每个页面相对独立，包含html代码、js文件。可维护性差

1、目录结构


特点：

1、从代码的框架上：

采用MVC模式。突出js代码的模块化，高度复用性

前端后采用数据接口的方式进行交互，前端继续后端返回的数据（JSON格式），渲染显示在页面中。其中，为了提高页面的性能，首次的数据由VM数据到页面中，打开页面的时候，前端直接拿来使用，无需再发送一次请求去获取。

这几个页面，其实会发现，虽然界面的结果有所不同，但是他们的请求显示逻辑都是一样：

---- order-detail-manager.js

1、从后端请求数据

2、对数据进行处理（验证、存数、修改等）

3、展示页面

4、绑定view事件


【注】：前端对后端的重心从之前的VM转到JSON数据中，对于数据的定义应该在前后端开发前就必须定义好

JS和HTML的解耦方式，提高js的复用性：

html代码：

	<section id=”J_xxx”>…</section>
	
	<script>
	YUI().use("XXX", function(Y)
	{
	     XXX.init({
	          nodeA: Y.one(“#J_xxx”)  // 通过参数传入nodeA
		 });
	});
	</script>

js代码：

	YUI.add("XXX", function(Y)  // 模块XXX
	{
	    XXX =  // 对象
	    {
	init: function(config)
	{
	this.nodeA = config.nodeA;  // 通过参数传入所需的HTML节点对象：nodeA
	…  // 对nodeA进行DOM操作
	}
	    };
	});

采用这种方式，当下次详情页面改版的时候，如果只是样式和页面的html结构发生变化的话，只需要修改引入模块时，传入的参数节点就好。


1、展示性能方面上：

从使用juicer模版引擎来渲染页面bigRender

2、使用`<script>`来存放html代码

html代码：

	<script type="text/x-template" id="order-detail-template-basic">
    //订单详情基本信息html模版
    //html模版中的数据通过juicer来渲染
	</script>

js代码：

	/**
	 * 渲染详情基本信息
	 * @name renderBasicUI
	 * @memeberof C.OrderDetailManager
	 * @param con{node} html内容展示所在的容器
	 * @param data{object}  json数据，后端接口数据
	 */
	renderBasicUI: function(con,data){
		var self = this,  template, html;
		template = self.config.nodeBaiscTemplate.getContent();
		html = Y.juicer(template,data);
		con.setContent(html)	
	}

其中：
	Y.juicer.register('C', C);
注册的是一个全局对象，可以在html模版里面对一些数据进行处理。数据的处理放在模版中处理，可读性更强，修改的时候也更加的方便。



3、从前端html代码的管理上：

充分利用TMS来管理。避免后端修改VM的问题
但是存在的一个问题就是，js和tms发布的时间有误差





## 项目总结

###工期过长的原因：

1、涉及7类、20多个彩种，玩法丰富

2、开发过长中有新彩种加入

3、视觉修改

4、细节的问题：彩种标红

### 经验

采用前后端分离的这种工作方式需要注意的点：

1、如果是新的接口，应该前后端开发之前，也就是在前端技术评审的时候进行约定

2、如果是旧的接口，前端开发人员必须在开发之前对数据进行分析，做好开发前的调用、整理工作


3、拿到视觉稿之后未细分功能，评估工作量（细到小时）

4、前期加强分析，设计充分后再开发，防止后期修改，防止bug数。在测试阶段可以很快的定位解决问题

5、和后端沟通及时，加强自测，将自测融入到平常的开发中。(阿古的建议：设计完成一个function，或者一个语句的时候就进行测试，频繁测试，想到点就立马测。完成一个基本逻辑流再测试，会因为时间太长，而导致自测点遗漏，有bug时bug定位时间长)


### 解决了问题：

- 页面模版修改，前端更加自由（风险并存）
- 前后端工作模式的转变。
   - 抛弃传统的“套页面”的工作方式，改为采用前后端接口方式，使后期我的彩票的再次开发和维护工作量减少，也有助于产出高质量的代码。
- 代码复用性、可维护性提高 
- 用户体验：结构清楚，可读性、易懂性提高










